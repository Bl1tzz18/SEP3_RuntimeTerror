@page "/Products"
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using global::Shared.DTOs
@using System.Security.Claims
@inject IProductService productService;
@inject ICartService cartService;


<div class="row height d-flex justify-content-center align-items-center">

    
    <div class="col-md-1">
        
        Category: <select>
            @foreach (var product in products)
            {
                if (product.inStock)
                {
                    <option value="@product.Category.Name">@product.Category.Name</option>
                }
            }
        </select>
    </div>
    <div class="col-md-6">
        <input type="text" @bind="@searchField" class="form-control form-input" placeholder="Search product...">
    </div>
    <div class="col-md-2">
        <button class="btn btn-primary" @onclick="() => searchProduct(searchField)">Search</button>
    </div>
</div>



@if (products == null)
    {
    }
    else if (!products.Any())
    {
        <p>No Products to display</p>
    }
    else
    {
        <div class="shell">
            <div class="container">
                <div class="row">
                    @foreach (var product in products)
                    {
                        if (product.inStock)
                        {
                            <div class="col-md-3">
                                <div class="wsk-cp-product">
                                    <div class="wsk-cp-img">
                                        <img src="@product.ImagePath" alt="Product" class="img-responsive"/>
                                    </div>
                                    <div class="wsk-cp-text">
                                        <div class="category">
                                            <span>@product.Category.Name</span>
                                        </div>
                                        <div class="title-product">
                                            <h3>@product.Name</h3>
                                        </div>
                                        <div class="description-prod">
                                            <p>@product.Description</p>
                                        </div>
                                        <div class="card-footer">
                                            <div class="wcf-left"><span class="price">@product.Price <i>dkk</i></span></div>
                                            <AuthorizeView>
                                                <Authorized>
                                                    <div class="wcf-right"><a href="/Products" @onclick="() => AddToCart(product.Id)" class="buy-btn" style="background: url('https://api.iconify.design/zmdi/shopping-basket.svg') no-repeat center center / contain;"></a></div>
                                                </Authorized>
                                                <NotAuthorized>
                                                    
                                                </NotAuthorized>
                                            </AuthorizeView>
                                            
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    }







@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    
    
    private ICollection<Product> products = new List<Product>();
    private string errormsg = "";
    private int productId;

    private string searchField = "";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await productService.GetProductsAsync();
            
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            isLoggedIn = user.Identity != null;
        
            if (!isLoggedIn) return;
        
            userClaims = user.Claims;
            name = user.Identity!.Name!;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errormsg = e.Message;
        }
    }
    
    

    private async Task AddToCart(int id)
    {
        try
        {
            
            var dto = new CartItemCreationDTO
            {
                ProductId = id,
                UserName = name
            };

            await cartService.AddToCartAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errormsg = e.Message;
        }
    }

    private async Task searchProduct(string searchString)
    {
        try
        {
            if (searchField.Equals(""))
            {
                products = await productService.GetProductsAsync();
            }
            else
            {
                products = await productService.GetProductsByNameAsync(searchString);
                searchField = "";    
            }
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errormsg = e.Message;
        }
    }
    
    

}
