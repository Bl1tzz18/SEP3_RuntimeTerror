@page "/OrderHistory"
@using System.Security.Claims
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@inject IOrderService orderService;
@inject NavigationManager navMgr;


<AuthorizeView Roles="customer">
    <Authorized>
        
@if (orders == null)
{
}
else if (!orders.Any())
{
    <p>No Orders to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Order ID</th>
            <th>Owner Username</th>
            <th>Total</th>
            <th>Products</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var order in orders)
        {
            <tr>
                <td>@order.Id</td>
                <td>@name</td>
                <td>@order.Total</td>
                <td>
                    <img style src="open-in-new.svg" class="funnel" @onclick="@(() => navMgr.NavigateTo($"/OrderProducts/{order.Id}"))"/>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

    </Authorized>
    <NotAuthorized>
        <h1>You shall be logged in to access cart</h1>
        <img width="600" src="https://i.kym-cdn.com/entries/icons/original/000/002/144/You_Shall_Not_Pass!_0-1_screenshot.jpg"/>
    </NotAuthorized>
    
</AuthorizeView>

@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private int total;
    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    
    private string errormsg = "";
    private ICollection<Order> orders = new List<Order>();
    
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            isLoggedIn = user.Identity != null;
    
            if (!isLoggedIn) return;
    
            userClaims = user.Claims;
            name = user.Identity!.Name!;
            
            orders = await orderService.GetOrdersByUserAsync(name);
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errormsg = e.Message;
        }
    }
    
}