@page "/Cart"
@using System.Security.Claims
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@inject IProductService productService;
@inject ICartService cartService;


@if (products == null)
{
}
else if (!products.Any())
{
    <p>No Products to display</p>
}
else
{
    <div class="shell">
        <div class="container">
            <div class="row">
                @foreach (var product in products)
                {
                    <div class="col-md-3">
                        <div class="wsk-cp-product">
                            <div class="wsk-cp-img">
                                <img src="@product.ImagePath" alt="Product" class="img-responsive"/>
                            </div>
                            <div class="wsk-cp-text">
                                <div class="category">
                                    <span>@product.Category.Name</span>
                                </div>
                                <div class="title-product">
                                    <h3>@product.Name</h3>
                                </div>
                                <div class="description-prod">
                                    <p>@product.Description</p>
                                </div>
                                <div class="card-footer">
                                    <div class="wcf-left"><span class="price">@product.Price <i>Credits</i></span></div>
                                    <div class="wcf-right"><a href="/Cart" @onclick="() => RemoveItemFromCartAsync(product.Id)" class="buy-btn" style="background: url('https://api.iconify.design/zmdi/delete.svg') no-repeat center center / contain;"></a></div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <hr>
            <button class="btn btn-primary marginBetweenButton">Purchase</button><button class="btn btn-primary" @onclick="RemoveItemsFromCartAsync">Remove all from cart</button>
            <p>Total price: @total</p>
        </div>
    </div>
    






@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private int total = 0;
    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private Cart _cart;


    private string errormsg = "";
    private ICollection<Product> products = new List<Product>();



    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            isLoggedIn = user.Identity != null;

            if (!isLoggedIn) return;

            userClaims = user.Claims;
            name = user.Identity!.Name!;
            
            products = await productService.GetProductsInCartByUserAsync(name);

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errormsg = e.Message;
        }
    }
    
    private async Task RemoveItemFromCartAsync(int productId)
    {
        try
        {
            await cartService.RemoveItemFromCartAsync(name, productId);
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errormsg = e.Message;
        }
    }
    
    private async Task RemoveItemsFromCartAsync()
    {
        try
        {
            await cartService.RemoveItemsFromCartAsync(name);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errormsg = e.Message;
        }
    }
}
}
<style>
    .marginBetweenButton{
        margin-right: 1rem;
    }
</style>